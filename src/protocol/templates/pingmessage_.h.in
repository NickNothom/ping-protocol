// C++ implementation of the Blue Robotics 'Ping' binary message protocol

//~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!
// THIS IS AN AUTOGENERATED FILE
// DO NOT EDIT
//~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!

#pragma once

#include "pingmessage.h"
// see https://en.cppreference.com/w/cpp/named_req/StandardLayoutType

struct pingmsg_header {
    pingmsg_header(uint16_t p = 0, uint16_t m = 0, uint8_t s = 0, uint8_t d = 0)
        : start1 { 'B' }
        , start2 { 'R' }
        , payload_length { p }
        , message_id { m }
        , source_device_id { s }
        , destination_device_id { d }
    {}
    uint8_t start1;
    uint8_t start2;
    uint16_t payload_length;
    uint16_t message_id;
    uint8_t source_device_id;
    uint8_t destination_device_id;
    uint16_t calculateChecksum() {
        uint16_t checksum = 0;
        for (uint16_t i = 0; i < sizeof(struct pingmsg_header); i++) {
            checksum += ((uint8_t*)this)[i];
        }
        return checksum;
    }
} __attribute__((packed));

struct pingmsg {
    pingmsg(uint16_t p = 0, uint16_t m = 0, uint8_t s = 0, uint8_t d = 0)
        : header(p, m, s, d)
    {}
    struct pingmsg_header header;
    uint8_t* payload_data(uint16_t offset = 0) { return (uint8_t*)this + sizeof(pingmsg_header) + offset; }
    uint16_t calculateChecksum() {
        uint16_t checksum = header.calculateChecksum();
        uint8_t* p = payload_data(0);
        for (uint16_t i = 0; i < header.payload_length; i++) {
            checksum += p[i];
        }
        return checksum;
    }
};

{% set message_type = _actual_message_type %}
{% for message in messages[message_type]['all_msgs'] %}
{% set total_payload = calc_payload(messages[message_type]['all_msgs'][message].payload) %}
struct {{message}}_payload {
{% for payload in messages[message_type]['all_msgs'][message].payload %}
    {{get_type_string(payload.type, pointer=False)}} {{payload.name}};
{% endfor %}
} __attribute__((packed));

struct message_{{message}} : pingmsg {
    message_{{message}}(uint8_t s = 0, uint8_t d = 0)
        : pingmsg({{total_payload}}, {{messages[message_type]['all_msgs'][message].id}}, s, d)
    {}
    struct {{message}}_payload payload;
} __attribute__((packed));

class {{subclass_info.name}}{{message_type}}_{{message}} : public {{class_info.name}}
{
public:
    {{subclass_info.name}}{{message_type}}_{{message}}(PingMessage& msg) : {{class_info.name}} { msg } {}
    {{subclass_info.name}}{{message_type}}_{{message}}(uint8_t* buf, uint16_t length) : {{class_info.name}} { buf, length } {}
    {{subclass_info.name}}{{message_type}}_{{message}}()
        : {{class_info.name}} { {{8 + total_payload + 2}} }
    {
        msgData[0] = 'B';
        msgData[1] = 'R';
        (uint16_t&)msgData[2] = {{total_payload}}; // payload size
        (uint16_t&)msgData[4] = {{messages[message_type]['all_msgs'][message].id}}; // ID
        msgData[6] = 0;
        msgData[7] = 0;
    }

{% set byte = namespace(offset=0, func='') %}
{% if messages[message_type]['all_msgs'][message].payload %}
{% for payload in messages[message_type]['all_msgs'][message].payload %}
{% if is_var_size(payload.type) %}{# ex type = 'u8[var]' #}
    {{get_type_string(payload.type, pointer=True)}} {{payload.name}}() { return ({{get_type_string(payload.type, pointer=True)}})(payload_data({{byte.offset}})); }
{% set byte.func = '{0} + {1}'.format(byte.func, get_c_size(payload.type)) %}
{% else %}
{% if is_vector(payload.type) %}
    {{get_type_string(payload.type, pointer=True)}} {{payload.name}}() { return (payload_data({{byte.offset}})); }
    void set_{{payload.name}}_at(uint16_t i, uint8_t data) { memcpy((payload_data({{byte.offset}} + i)), &data, 1); }
{% else %}
    {{get_type_string(payload.type)}} {{payload.name}}() { {{get_type_string(payload.type, name='d')}}; memcpy(&d, (payload_data({{byte.offset}})), {{get_c_size(payload.type)}}); return d; };
    void set_{{payload.name}}({{get_type_string(payload.type)}} {{payload.name}}) { memcpy((payload_data({{byte.offset}})), &{{payload.name}}, {{get_c_size(payload.type)}});};
{% endif %}
{% set byte.offset = byte.offset + get_c_size(payload.type) %}
{% endif %}
{% endfor %}
{% endif %}
};

{% endfor %}
